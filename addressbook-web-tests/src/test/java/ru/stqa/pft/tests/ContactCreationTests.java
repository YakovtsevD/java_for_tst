package ru.stqa.pft.tests;// Generated by Selenium IDE

import org.hamcrest.MatcherAssert;
import org.testng.Assert;
import org.testng.annotations.Test;
import ru.stqa.pft.model.ContactData;
import ru.stqa.pft.model.Contacts;

import java.util.Comparator;
import java.util.List;
import java.util.Set;

import static org.hamcrest.Matchers.equalTo;

public class ContactCreationTests extends TestBase {

  @Test
  public void testContactCreation() {

    app.goTo().gotoHome();
    //Set<ContactData> before = app.contact().all();  //выгружаем список контактов ДО
    Contacts before = app.contact().all();  //выгружаем список контактов ДО
    ContactData contact = new ContactData().withFirstname("Ben").withLastname("Benson").withEmail("ben@tut.by").withGroup("newgroup777"); // создаем объекти контакта который добавляем
    app.contact().create(contact);
    //Set<ContactData> after = app.contact().all();  // выгружаем лист для сравнения после создания
    Contacts after = app.contact().all();  // выгружаем лист для сравнения после создания
    //Assert.assertEquals(after.size(), before.size()+1); // проверка, что записей стало +1
    MatcherAssert.assertThat(after.size(), equalTo(before.size()+1));
    //contact.withId(after.stream().mapToInt((g) -> g.getId()).max().getAsInt()); // у нового контакта максимальный id, находим этот id и присваиваем в объект contact
    //before.add(contact); // добавляем контакт из теста в список ДО создания
    //Assert.assertEquals(before, after);
    MatcherAssert.assertThat(after, equalTo(
            before.withAdded(contact.withId(after.stream().mapToInt((g) -> g.getId()).max().getAsInt()))));
    //app.getSessionHelper().logout();
  }

  //Assert.assertEquals(new HashSet<Object>(before), new HashSet<Object>(after)); //сравнение неупорядоченных списков
  // сортировка и сравнение упорядоченных списков (сортировка нужна, т.к. после создания (модификации) контакта
  // может измениться порядок в списке, который сортируется по фамилии)
  //Comparator<? super ContactData> byId = (g1, g2) -> Integer.compare(g1.getId(), g2.getId());
  //before.sort(byId);
  //after.sort(byId);
  //contact.withId(after.stream().max((o1, o2) -> Integer.compare(o1.getId(), o2.getId())).get().getId()); // у нового контакта максимальный id, находим этот id и присваиваем в объект contact

}
