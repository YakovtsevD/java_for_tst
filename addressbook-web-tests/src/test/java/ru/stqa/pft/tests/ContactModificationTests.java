package ru.stqa.pft.tests;// Generated by Selenium IDE

import org.testng.annotations.BeforeMethod;
import org.testng.annotations.Test;
import ru.stqa.pft.model.ContactData;
import ru.stqa.pft.model.Contacts;

import static org.hamcrest.CoreMatchers.equalTo;
import static org.hamcrest.MatcherAssert.assertThat;

public class ContactModificationTests extends TestBase {

  @BeforeMethod
  public void ensurePreConditions() {
    app.goTo().gotoHome();
    //if (!app.contact().isThereAContact()) {
    if (app.contact().all().size()==0) {
      app.contact().create(new ContactData().withFirstname("Ivana").withLastname("Ivanova").withEmail("iva@tut.by").withGroup("newgroup777"));
    }
  }

  @Test (enabled = true)
  public void testContactModification() {
    Contacts before = app.contact().all();  //выгружаем множество контактов перед модификацией
    ContactData modifiedContact = before.iterator().next();  // выбираем любой контакт для модификации
    ContactData contact = new ContactData()
            .withId(modifiedContact.getId()).withFirstname("Sam").withLastname("Sadko").withEmail("sam@tut.by");
    app.contact().modify(contact);
    assertThat(app.contact().count(), equalTo(before.size())); // сравниваем количество записей (count) до загрузки списка повторно, ловим ошибку раньше
    Contacts after = app.contact().all();  // выгружаем множество для сравнения после модификации
    //assertEquals(after.size(), before.size()); // проверка, что записей осталось столько же

    before.remove(modifiedContact);  // из множества ДО модификации удаляем запись, которую модифицируем в тесте
    before.add(contact);  // добавляем запись со значениями модификации (в том числе и id)

    //Assert.assertEquals(before, after); // сравниваем множества
    assertThat(after, equalTo(before.without(modifiedContact)));

    //app.getSessionHelper().logout();
  }

}
